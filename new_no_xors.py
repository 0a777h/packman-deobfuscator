import struct
import time

opaque_predicates = [
		"70 ?? 71 ??", # jo jno
		"71 ?? 70 ??", # jno jo
		"72 ?? 73 ??", # jb jae
		"73 ?? 72 ??", # jae jb
		"74 ?? 75 ??", # je jne
		"75 ?? 74 ??", # jne je
		"76 ?? 77 ??", # jbe ja
		"77 ?? 76 ??", # ja jbe
		"78 ?? 79 ??", # js jns
		"79 ?? 78 ??", # jns js
		"0F 80 ?? ?? ?? ?? 0F 81 ?? ?? ?? ??",
		"0F 81 ?? ?? ?? ?? 0F 80 ?? ?? ?? ??",
		"0F 82 ?? ?? ?? ?? 0F 83 ?? ?? ?? ??",
		"0F 83 ?? ?? ?? ?? 0F 82 ?? ?? ?? ??",
		"0F 84 ?? ?? ?? ?? 0F 85 ?? ?? ?? ??",
		"0F 85 ?? ?? ?? ?? 0F 84 ?? ?? ?? ??",
		"0F 86 ?? ?? ?? ?? 0F 87 ?? ?? ?? ??",
		"0F 87 ?? ?? ?? ?? 0F 86 ?? ?? ?? ??",
		"0F 88 ?? ?? ?? ?? 0F 89 ?? ?? ?? ??",
		"0F 89 ?? ?? ?? ?? 0F 88 ?? ?? ?? ??",
		"0F 80 ?? ?? ?? ?? 71 ??",
		"71 ?? 0F 80 ?? ?? ?? ??",
		"0F 81 ?? ?? ?? ?? 70 ??",
		"70 ?? 0F 81 ?? ?? ?? ??",
		"0F 82 ?? ?? ?? ?? 73 ??",
		"73 ?? 0F 82 ?? ?? ?? ??",
		"0F 83 ?? ?? ?? ?? 72 ??",
		"72 ?? 0F 83 ?? ?? ?? ??",
		"0F 84 ?? ?? ?? ?? 75 ??",
		"75 ?? 0F 84 ?? ?? ?? ??",
		"0F 85 ?? ?? ?? ?? 74 ??",
		"74 ?? 0F 85 ?? ?? ?? ??",
		"0F 86 ?? ?? ?? ?? 77 ??",
		"77 ?? 0F 86 ?? ?? ?? ??",
		"0F 87 ?? ?? ?? ?? 76 ??",
		"76 ?? 0F 87 ?? ?? ?? ??",
		"0F 88 ?? ?? ?? ?? 79 ??",
		"79 ?? 0F 88 ?? ?? ?? ??",
		"0F 89 ?? ?? ?? ?? 78 ??",
		"78 ?? 0F 89 ?? ?? ?? ??"
]

JMP_patterns = [
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 81 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 9C 8B ?? 24 81 ?? ?? ?? ?? ?? 89 ?? 24 9D",
		"83 ?? ?? 89 ?? 24 9C 8B ?? 24 ?? ?? ?? ?? ?? 89 ?? 24 9D",
		"83 ?? ?? 89 ?? 24 9C 8B ?? 24 ?? ?? ?? 89 ?? 24 9D",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 D9 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 DF 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 DA 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 D8 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 DB 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 D9",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 DF",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 DA",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 D8",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 DB",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 81 ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? F7 ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 43 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 42 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 40 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 49 0F ?? ?? ?? ?? ??"
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 4F 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 4B 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 48 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 47 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 41 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 4A 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 43",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 42",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 40",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 49",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 4F",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 4B",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 48",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 47",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 41",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? 4A",    
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? A9 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 25 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 3D ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 15 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 05 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 0D ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 35 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 2D ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 ?? ?? ?? ?? ?? A9 ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 25 ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 3D ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 15 ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 05 ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 0D ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 35 ?? ?? ?? ??",
		"83 ?? ?? 89 ?? 24 B8 ?? ?? ?? ?? 2D ?? ?? ?? ??",
		"57 BF ?? ?? ?? ?? F7 ?? ?? ?? ?? ??",
		"57 BF ?? ?? ?? ?? 81 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"57 BF ?? ?? ?? ?? F7 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"57 9C 8B ?? 24 ?? ?? ?? ?? ?? ?? 89 ?? 24 9D",
		"57 BF ?? ?? ?? ?? F7 ?? 0F ?? ?? ?? ?? ??",
		"57 BF ?? ?? ?? ?? 47 0F ?? ?? ?? ?? ??",
		"57 BF ?? ?? ?? ?? 4F 0F ?? ?? ?? ?? ??",
		"57 9C 8B ?? 24 ?? ?? ?? 89 ?? 24 9D",
		"57 BF ?? ?? ?? ?? 81 ?? ?? ?? ?? ??",
		"57 BF ?? ?? ?? ?? 4F",
		"57 BF ?? ?? ?? ?? 47",
		"53 BB ?? ?? ?? ?? 81 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"53 BB ?? ?? ?? ?? F7 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"53 9C 8B ?? 24 ?? ?? ?? ?? ?? ?? 89 ?? 24 9D",
		"53 BB ?? ?? ?? ?? 43 0F ?? ?? ?? ?? ??",
		"53 BB ?? ?? ?? ?? 43 0F ?? ?? ?? ?? ??",
		"53 9C 8B ?? 24 ?? ?? ?? 89 ?? 24 9D",
		"53 BB ?? ?? ?? ?? 81 ?? ?? ?? ?? ??",
		"53 BB ?? ?? ?? ?? F7 ?? ?? ?? ?? ??",
		"53 BB ?? ?? ?? ?? F7 ??",
		"53 BB ?? ?? ?? ?? 43",
		"53 BB ?? ?? ?? ?? 4B", 
		"52 BA ?? ?? ?? ?? 81 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"52 BA ?? ?? ?? ?? F7 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"52 9C 8B ?? 24 ?? ?? ?? ?? ?? ?? 89 ?? 24 9D",
		"52 9C 8B ?? 24 ?? ?? ?? 89 ?? 24 9D",
		"52 BA ?? ?? ?? ?? 4A 0F ?? ?? ?? ?? ??",
		"52 BA ?? ?? ?? ?? 42 0F ?? ?? ?? ?? ??",
		"52 BA ?? ?? ?? ?? 81 ?? ?? ?? ?? ??",
		"52 BA ?? ?? ?? ?? F7 ?? ?? ?? ?? ??",
		"52 9C 8B ?? 24 83 ?? ?? 89 ?? ?? 9D",
		"52 BA ?? ?? ?? ?? 4A",
		"52 BA ?? ?? ?? ?? 42", 
		"51 B9 ?? ?? ?? ?? F7 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"51 B9 ?? ?? ?? ?? 81 ?? ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"51 9C 8B ?? 24 ?? ?? ?? ?? ?? ?? 89 ?? 24 9D",
		"51 B9 ?? ?? ?? ?? 41 0F ?? ?? ?? ?? ??",
		"51 B9 ?? ?? ?? ?? 49 0F ?? ?? ?? ?? ??",
		"51 9C 8B ?? 24 ?? ?? ?? 89 ?? 24 9D",
		"51 B9 ?? ?? ?? ?? F7 ?? ?? ?? ?? ??",
		"51 B9 ?? ?? ?? ?? 81 ?? ?? ?? ?? ??",
		"51 B9 ?? ?? ?? ?? 41",
		"51 B9 ?? ?? ?? ?? 49",
		"50 B8 ?? ?? ?? ?? 35 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 15 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 25 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??", 
		"50 B8 ?? ?? ?? ?? 0D ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? A9 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 3D ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 2D ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 05 ?? ?? ?? ?? 0F ?? ?? ?? ?? ??",
		"50 9C 8B ?? 24 ?? ?? ?? ?? ?? 89 ?? 24 9D",  
		"50 B8 ?? ?? ?? ?? F7 D8 0F ?? ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 40 0F ?? ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 48 0F ?? ?? ?? ?? ??",
		"50 9C 8B ?? 24 ?? ?? ?? 89 ?? 24 9D",          
		"50 B8 ?? ?? ?? ?? 35 ?? ?? ?? ??",  
		"50 B8 ?? ?? ?? ?? 15 ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 25 ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 0D ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? A9 ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 3D ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 2D ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? 05 ?? ?? ?? ??",
		"50 B8 ?? ?? ?? ?? F7 D8",
		"50 B8 ?? ?? ?? ?? 40",
		"50 B8 ?? ?? ?? ?? 48",
]

class Template:
	def __init__(self):
		pass

	def find_all(self, start, end, seq):
		res = list()
		addr = find_binary(start, SEARCH_DOWN | SEARCH_NEXT, seq)
		while (addr <= end and addr != BADADDR):
			res.append(addr)
			addr = find_binary(addr, SEARCH_DOWN | SEARCH_NEXT, seq)
		return res

	def patch(self, dest, seq):
		for i, c in enumerate(seq):
			idc.PatchByte(dest+i, ord(c))

	def disasm(self, dest, length):
		dis = list()
		end = dest + length
		while (dest <= end):
			dis.append(dest)
			dest = next_head(dest, end)
		return dis

	def hide(self, addr, length):
		HideArea(addr, addr+length, "", "", "", 0xEEFFFFFF)

	def toCode(self, addr, length):
		for i in range(length):
			MakeCode(addr + i)


class lol(Template):


		def __init__(self):
			self.start = get_segm_by_sel(0)                    # only for .text section
			self.end = get_segm_end(self.start)
			self.count = 0
			self.regs = {
			"eax" : "\xB8",
			"ecx" : "\xB9",
			"edx" : "\xBA",
			"ebx" : "\xBB", 
			"esp" : "\xBC",
			"ebp" : "\xBD",   
			"esi" : "\xBE",
			"edi" : "\xBF",
			}

			self.pops = [
				0x58, # pop eax
				0x59, # pop ecx
				0x5A, # pop edx
				0x5B, # pop ebx
				0x5C, # pop esp
				0x5D, # pop ebp
				0x5E, # pop esi
				0x5F  # pop edi
				]
			self.mov = 0x8b
			self.add = 0x83

		def PatchPredicates(self, sequence):
			matches = self.find_all(self.start, self.end, sequence)
			for match in matches:
				if (sequence.split()[0] != "0F"):
					if (sequence.split()[2] != "0F"):               
						if Byte(match+1) == Byte(match + 3) + 2:    
							self.patch(match, "\xEB")                
							self.patch(match+2, "\xFF"*2)
							self.count += 1
					else:
						if (Byte(match+1) == Dword(match+4) + 6):
							self.patch(match, "\xEB")                
							self.patch(match+2, "\xFF"*6)
							self.count += 1
				else:
					if (sequence.split()[6] == "0F"):                                          
						if Dword(match+2) == Dword(match+8) + 6:        
							self.patch(match, "\x90\xE9")         
							self.patch(match+6, "\xFF"*6)
							self.count += 1
					else:
						if Dword(match+2) == Byte(match+7) + 2:        
							self.patch(match, "\x90\xE9")         
							self.patch(match+6, "\xFF"*2)
							self.count += 1			
			

		def patch_jmps(self, sequence):
			sequence_length = len(sequence.split())
			matches = self.find_all(self.start, self.end, sequence)
			for match in matches:
				bytes_to_patch, opcode, offset, jmp_type = 0, 0, 0, 0
				jmp_type = Byte(match + sequence_length)
				if jmp_type == 0x0F: # far jmp
					offset = Dword(match + sequence_length + 2) + sequence_length + 6
				elif jmp_type >= 0x70 and jmp_type < 0x80: # short jmp
					offset = Byte(match + sequence_length + 1) + 2 + sequence_length
				if offset != 0:
					opcode = Byte(match + offset)
					if opcode == self.mov:
						bytes_to_patch = 6
					elif opcode in self.pops:
						bytes_to_patch = 1
						if Byte(match + offset + 1) == self.add:
							bytes_to_patch = 4
					
					if bytes_to_patch != 0:
						if jmp_type == 0x0F:
							self.patch(match, "\x90" * (sequence_length + 1) + "\xE9")
						elif jmp_type >= 0x70 and jmp_type < 0x80:
							self.patch(match, "\x90" * sequence_length + "\xEB")
						self.patch(match + offset, "\x90" * bytes_to_patch)
						self.count += 1
						



		def run(self):
				for sequence in opaque_predicates:
						self.PatchPredicates(sequence)
				for s in JMP_patterns:
						self.patch_jmps(s)
				print "patched %d places" % self.count
				self.count = 0


x = lol()
x.run()